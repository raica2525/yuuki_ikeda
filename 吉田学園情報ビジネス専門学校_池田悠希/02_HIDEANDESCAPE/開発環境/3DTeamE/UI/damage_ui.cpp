//=============================================================================
//
// ダメージ処理 [damage_ui.cpp]
// Author : 若山　言稀
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "damage_ui.h"
#include "manager.h"
#include "renderer.h"
#include "billboard.h"
#include "manager.h"
#include "player.h"
//*****************************************************************************
//　静的メンバ変数の初期化
//*****************************************************************************
LPDIRECT3DTEXTURE9 CDamage_ui::m_pTexture = NULL;
char *CDamage_ui::m_cFileName = DAMAGE_UI_TEXTURE;
//=============================================================================
// コンストラクタ
//=============================================================================
CDamage_ui::CDamage_ui() :CObject2D(3)
{
	m_pos = ZEROVECTOR3;
	m_frot = 0.0f;
	m_size = ZEROVECTOR3;
	m_col = D3DCOLOR_RGBA(255, 255, 255, 255);
}

//=============================================================================
// デストラクタ
//=============================================================================
CDamage_ui::~CDamage_ui()
{
}

//=============================================================================
// テクスチャ読み込み関数
//=============================================================================
HRESULT CDamage_ui::Load(void)
{
	CRenderer *pRenderer = CManager::GetRenderer();
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();

	// テクスチャの生成
	for (int nTexture = 0; nTexture<TEXTURE_MAX; nTexture++)
	{
		D3DXCreateTextureFromFile(pDevice,				// デバイスへのポインタ
			m_cFileName,						// ファイルの名前
			&m_pTexture);						// 読み込むメモリー

	}
	return S_OK;
}

//=============================================================================
// テクスチャ破棄関数
//=============================================================================
void CDamage_ui::Unload(void)
{
	// テクスチャの破棄
	for (int nTexture = 0; nTexture < TEXTURE_MAX; nTexture++)
	{
		if (m_pTexture != NULL)
		{
			m_pTexture->Release();
			m_pTexture = NULL;
		}

	}
}

//=============================================================================
// 生成関数
//=============================================================================
CDamage_ui * CDamage_ui::Create(void)
{
	CDamage_ui* pDamageUi = NULL;
	pDamageUi = new CDamage_ui;
	pDamageUi->Init();

	return pDamageUi;
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CDamage_ui::Init(void)
{
	//オブジェクト2D初期化
	CObject2D::Init();
	//サイズ生成
	m_size = D3DXVECTOR3(SCREEN_WIDTH, SCREEN_HEIGHT, 0);
	//位置設定
	m_pos = D3DXVECTOR3(SCREEN_WIDTH - (m_size.x / 2), SCREEN_HEIGHT - (m_size.y/2), 0);
	//透明度設定
	//セット
	SetPos(m_pos);
	SetRot(m_frot);
	SetSize(m_size);
	SetDamageUi(START_LIFE);

	//テクスチャ設定
	BindTexture(m_pTexture);
 	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CDamage_ui::Uninit(void)
{
	CObject2D::Uninit();

}

//=============================================================================
// 更新処理
//=============================================================================
void CDamage_ui::Update(void)
{
	CObject2D::Update();
}

//=============================================================================
// 描画処理
//=============================================================================
void CDamage_ui::Draw(void)
{
	CObject2D::Draw();
}
//=============================================================================
// アルファ値処理
//=============================================================================
void CDamage_ui::SetDamageUi(int nlife)
{
	SetCol(D3DCOLOR_RGBA(255, 255, 255, (255 / START_LIFE) *(START_LIFE - nlife)));
}