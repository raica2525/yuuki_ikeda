//=============================================================================
//
// 弾UI処理 [bullet_ui.cpp]
// Author : 若山　言稀
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "bullet_ui.h"
#include "manager.h"
#include "renderer.h"
#include "billboard.h"
#include "manager.h"
//*****************************************************************************
//　静的メンバ変数の初期化
//*****************************************************************************
LPDIRECT3DTEXTURE9 CBullet_ui::m_pTexture[BULLET_TEXTURE_MAX] = {};
char *CBullet_ui::m_cFileName[BULLET_TEXTURE_MAX] =
{
	BULLET_UI_TEXTURE,
};
//=============================================================================
// コンストラクタ
//=============================================================================
CBullet_ui::CBullet_ui() :CObject2D(2)
{
	m_pos = ZEROVECTOR3;
	m_frot = 0.0f;
	m_size = ZEROVECTOR3;
	m_col = D3DCOLOR_RGBA(255, 255, 255, 255);
}

//=============================================================================
// デストラクタ
//=============================================================================
CBullet_ui::~CBullet_ui()
{
}

//=============================================================================
// テクスチャ読み込み関数
//=============================================================================
HRESULT CBullet_ui::Load(void)
{
	CRenderer *pRenderer = CManager::GetRenderer();
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();

	// テクスチャの生成
	for (int nTexture = 0; nTexture<BULLET_TEXTURE_MAX; nTexture++)
	{
		D3DXCreateTextureFromFile(pDevice,				// デバイスへのポインタ
			m_cFileName[nTexture],						// ファイルの名前
			&m_pTexture[nTexture]);						// 読み込むメモリー

	}
	return S_OK;
}

//=============================================================================
// テクスチャ破棄関数
//=============================================================================
void CBullet_ui::Unload(void)
{
	// テクスチャの破棄
	for (int nTexture = 0; nTexture < BULLET_TEXTURE_MAX; nTexture++)
	{
		if (m_pTexture[nTexture] != NULL)
		{
			m_pTexture[nTexture]->Release();
			m_pTexture[nTexture] = NULL;
		}

	}
}

//=============================================================================
// 生成関数
//=============================================================================
CBullet_ui * CBullet_ui::Create(D3DXVECTOR3 pos)
{
	CBullet_ui* pBulletUi = NULL;
	pBulletUi = new CBullet_ui;
	//弾の初期値を設定
	pBulletUi->m_pos = pos;
	pBulletUi->m_size = BULLET_UI_SIZE;
	pBulletUi->Init();

	return pBulletUi;
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CBullet_ui::Init(void)
{
	//セット
	SetPos(m_pos);
	SetRot(m_frot);
	SetSize(m_size);
	SetCol(m_col);

	//テクスチャ設定
	BindTexture(m_pTexture[0]);
	//オブジェクト2D初期化
	CObject2D::Init();

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CBullet_ui::Uninit(void)
{
	CObject2D::Uninit();

}

//=============================================================================
// 更新処理
//=============================================================================
void CBullet_ui::Update(void)
{
	CObject2D::Update();
}

//=============================================================================
// 描画処理
//=============================================================================
void CBullet_ui::Draw(void)
{
	CObject2D::Draw();
}