//・・・・・・・・・・・・・・・・・・・・・・・・・・・
//
//	main.cpp
//	Author:池田悠希
//
//・・・・・・・・・・・・・・・・・・・・・・・・・・・

//・・・・・・・・・・・・・・・・・・・・・・・・・・・
//インクルードファイル
//・・・・・・・・・・・・・・・・・・・・・・・・・・・
#include "main.h"

#include "manager.h"

//・・・・・・・・・・・・・・・・・・・・・・・・・・・
//マクロ定義
//・・・・・・・・・・・・・・・・・・・・・・・・・・・
#define WINDOW_NAME "HIDE and ESCAPE"    // ウインドウのキャプション名

//・・・・・・・・・・・・・・・・・・・・・・・・・・・
//プロトタイプ宣言
//・・・・・・・・・・・・・・・・・・・・・・・・・・・
LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

//・・・・・・・・・・・・・・・・・・・・・・・・・・・
//グローバル変数
//・・・・・・・・・・・・・・・・・・・・・・・・・・・
LPDIRECT3D9 g_pD3D             = NULL;    // Direct3Dオブジェクト
LPDIRECT3DDEVICE9 g_pD3DDevice = NULL;    // Deviceオブジェクト(描画に必要)

#ifdef _DEBUG
LPD3DXFONT g_pFont = NULL;    // フォントへのポインタ
int g_nCountFPS;              // FPSカウンタ
#endif

//・・・・・・・・・・・・・・・・・・・・・・・・・・・
//メイン関数
//・・・・・・・・・・・・・・・・・・・・・・・・・・・
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
{
    CManager* pManager = NULL;    //マネージャのポインタ
    WNDCLASSEX wcex =
      {
        sizeof(WNDCLASSEX),
        CS_CLASSDC,
        WndProc,
        0,
        0,
        hInstance,
        NULL,
        LoadCursor(NULL, IDC_ARROW),
        (HBRUSH)(COLOR_WINDOW + 1),
        NULL,
        CLASS_NAME,
        NULL};
    RECT rect = {0, 0, SCREEN_WIDTH, SCREEN_HEIGHT};
    HWND hWnd;
    MSG msg;
    DWORD dwCurrentTime;
    DWORD dwFrameCount;
    DWORD dwExecLastTime;
    DWORD dwFPSLastTime;

    // ウィンドウクラスの登録
    RegisterClassEx(&wcex);

    // 指定したクライアント領域を確保するために必要なウィンドウ座標を計算
    AdjustWindowRect(&rect, WS_OVERLAPPEDWINDOW, false);

    // ウィンドウの作成
    hWnd = CreateWindow(CLASS_NAME,
                        WINDOW_NAME,
                        WS_VISIBLE | WS_POPUP,
                        CW_USEDEFAULT,
                        CW_USEDEFAULT,
                        (rect.right - rect.left),
                        (rect.bottom - rect.top),
                        NULL,
                        NULL,
                        hInstance,
                        NULL);
    //初期化処理
    pManager = new CManager;
    pManager->Init(hWnd, true, hInstance);

    // 分解能を設定
    timeBeginPeriod(1);

    // フレームカウント初期化
    dwCurrentTime =
      dwFrameCount = 0;
    dwExecLastTime =
      dwFPSLastTime = timeGetTime();

    // ウインドウの表示
    ShowWindow(hWnd, nCmdShow);
    UpdateWindow(hWnd);

    // メッセージループ
    while(1)
    {
        if(PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
        {
            if(msg.message == WM_QUIT)
            {    // PostQuitMessage()が呼ばれたらループ終了
                break;
            }
            else
            {
                // メッセージの翻訳とディスパッチ
                TranslateMessage(&msg);
                DispatchMessage(&msg);
            }
        }
        else
        {
            dwCurrentTime = timeGetTime();    // 現在の時間を取得
            if((dwCurrentTime - dwFPSLastTime) >= 500)
            {    // 0.5秒ごとに実行
#ifdef _DEBUG
                // FPSを算出
                g_nCountFPS = dwFrameCount * 1000 / (dwCurrentTime - dwFPSLastTime);
#endif
                dwFPSLastTime = dwCurrentTime;    // 現在の時間を保存
                dwFrameCount  = 0;
            }

            if((dwCurrentTime - dwExecLastTime) >= (1000 / 60) && GetActiveWindow() == hWnd)
            {                                      // 1/60秒経過
                dwExecLastTime = dwCurrentTime;    // 現在の時間を保存

                // 更新処理
                pManager->Update();

                // 描画処理
                pManager->Draw();

                dwFrameCount++;
            }
        }
    }

    // 終了処理
    if(pManager != NULL)
        pManager->Uninit();
    delete pManager;
    pManager = NULL;

    // ウィンドウクラスの登録を解除
    UnregisterClass(CLASS_NAME, wcex.hInstance);

    // 分解能を戻す
    timeEndPeriod(1);

    return (int)msg.wParam;
}

//・・・・・・・・・・・・・・・・・・・・・・・・・・・
//ウィンドウプロシージャ
//・・・・・・・・・・・・・・・・・・・・・・・・・・・
LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    switch(uMsg)
    {
        case WM_CREATE:
            break;

        case WM_DESTROY:
            PostQuitMessage(0);
            break;

        default:
            break;
    }

    return DefWindowProc(hWnd, uMsg, wParam, lParam);
}

//・・・・・・・・・・・・・・・・・・・・・・・・・・・
//FPS取得
//・・・・・・・・・・・・・・・・・・・・・・・・・・・
#ifdef _DEBUG
int GetFPS(void)
{
    return g_nCountFPS;
}
#endif
